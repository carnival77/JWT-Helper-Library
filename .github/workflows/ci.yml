name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# WRITE 할 수 있는 권한을 부여합니다. (중요)
#permissions: write-all

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # WRITE 할 수 있는 권한을 부여합니다. (중요)
    permissions:
      pull-requests: write
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      # gradle wrapper를 실행할 수 있도록 실행 권한 (+x)을 줍니다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ./gradlew build를 통해 프로젝트를 빌드하고 테스트를 실행한다.
      # jacocoTestReport 태스크를 통해 JaCoCo 커버리지 리포트를 생성한다.
      # 이 단계에서 기본적인 빌드와 테스트, 커버리지 리포트(HTML, XML)가 모두 준비된다.
      - name: Build with Gradle and Test with Coverage # 빌드 + 테스트 + 커버리지 리포트를 생성.
        run: ./gradlew clean build jacocoTestReport --no-daemon

      # actions/upload-artifact 액션을 통해 생성된 커버리지 HTML 리포트를 아티팩트로 업로드한다.
      # 빌드가 완료되면 GitHub Actions 결과 페이지에서 이 HTML 아티팩트를 다운로드 받아 로컬 브라우저에서 열어볼 수 있다.
      - name: Upload coverage report (HTML)
        uses: actions/upload-artifact@v3 # HTML 리포트를 GitHub Actions 결과 페이지에서 다운로드 가능하도록 업로드.
        with:
          name: coverage-html-report
          path: build/reports/jacoco/test/html

      # PR 리뷰어가 변경된 코드에 대한 커버리지 정보를 쉽게 확인할 수 있다.
      # 빌드/테스트 파이프라인 결과로 단순히 성공/실패 상태만 보는 것이 아니라, 커버리지 향상 여부나 부족한 부분을 PR 대화에서 직접 파악 가능하다.
      - name: 테스트 커버리지를 PR에 코멘트로 등록
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1 # JaCoCo XML 리포트를 분석하여 PR에 커버리지 결과를 코멘트로 남긴다.
        with:
          title: 📝 테스트 커버리지 리포트
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 60
          min-coverage-changed-files: 60
